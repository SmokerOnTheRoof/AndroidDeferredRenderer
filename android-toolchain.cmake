set(CMAKE_CROSSCOMPILING TRUE)
set(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SKIP_RPATH ON)

set(CMAKE_C_COMPILER_WORKS 1)
set(CMAKE_CXX_COMPILER_WORKS 1)
set(CMAKE_SKIP_COMPATIBILITY_TESTS 1)

set(CMAKE_SYSTEM_PROCESSOR "arm")

set(ANDROID ON)

set(SE_ANDROID_NDK_ROOT    "C:/android-ndk-r9d")

set(SE_ANDROID_TARGET_ABI_VERSION 19) # 3-20

set(ANDROID_TARGET_ARCHITECTURE arm) # arm, mips, x86

set(ANDROID_NDK_SYSROOT "${SE_ANDROID_NDK_ROOT}/platforms/android-${SE_ANDROID_TARGET_ABI_VERSION}/arch-${ANDROID_TARGET_ARCHITECTURE}")

#set(COMMON_FLAGS "-DANDROID ${CMAKE_C_FLAGS} )
#--sysroot=${ANDROID_NDK_SYSROOT}")

#set(CMAKE_C_FLAGS "${COMMON_FLAGS}" CACHE STRING "C Flags" FORCE)
#set(CMAKE_CXX_FLAGS "${COMMON_FLAGS}" CACHE STRING "C++ Flags" FORCE)

set(CMAKE_FIND_ROOT_PATH ${ANDROID_NDK_SYSROOT})

set(ANDROID_NDK_STL "gnu-libstdc++")

set(ANDROID_NDK_GCC_VERSION  "4.8")

set(CMAKE_SYSTEM_PROCESSOR "arm")
set(ANDROID_NDK_ABI "armeabi")
set(ANDROID_NDK_ABI_EXT "arm-linux-androideabi")
set(ANDROID_NDK_ARCH_CFLAGS "-D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -mtune=xscale -msoft-float -mthumb")


set(ANDROID_NDK_PLATFORM_CXXFLAGS "-I${SE_ANDROID_NDK_ROOT}/platforms/android-${SE_ANDROID_TARGET_ABI_VERSION}/arch-${ANDROID_TARGET_ARCHITECTURE}/usr/include")

if(ANDROID_NDK_STL MATCHES "gnu-libstdc")
	message("using gnu-libstdc++")
	set(ANDROID_NDK_STL_CXXFLAGS "-I${SE_ANDROID_NDK_ROOT}/sources/cxx-stl/${ANDROID_NDK_STL}/${ANDROID_NDK_GCC_VERSION}/include -I${SE_ANDROID_NDK_ROOT}/sources/cxx-stl/${ANDROID_NDK_STL}/${ANDROID_NDK_GCC_VERSION}/libs/${ANDROID_NDK_ABI}/include")
	set(ANDROID_NDK_STL_LIBRARYPATH "${SE_ANDROID_NDK_ROOT}/sources/cxx-stl/${ANDROID_NDK_STL}/${ANDROID_NDK_GCC_VERSION}/libs/${ANDROID_NDK_ABI}")
	set(ANDROID_NDK_STL_LDFLAGS "${ANDROID_NDK_STL_LIBRARYPATH}/libgnustl_shared.so")
	set(SE_ANDROID_STL_LIBNAME "gnustl_shared")
elseif(ANDROID_NDK_STL MATCHES "stlport")
	message("using stlport")
	set(ANDROID_NDK_STL_CXXFLAGS "-I${SE_ANDROID_NDK_ROOT}/sources/cxx-stl/${ANDROID_NDK_STL}/stlport")
	set(ANDROID_NDK_STL_LIBRARYPATH "${SE_ANDROID_NDK_ROOT}/sources/cxx-stl/${ANDROID_NDK_STL}/libs/${ANDROID_NDK_ABI}")
	set(ANDROID_NDK_STL_LDFLAGS "${ANDROID_NDK_STL_LIBRARYPATH}/libstlport_shared.so")
	set(SE_ANDROID_STL_LIBNAME "stlport_shared")
endif()

set(ANDROID_NDK_TOOLCHAIN_ROOT_PATH "${SE_ANDROID_NDK_ROOT}/toolchains/arm-linux-androideabi-4.8/prebuilt/windows-x86_64")

# This should add the missing include directories to the CDT project
set(ANDROID_NDK_TOOLCHAIN_INCLUDE_CXXFLAGS_FLAGS    "-I${ANDROID_NDK_TOOLCHAIN_ROOT_PATH}/lib/gcc/arm-linux-androideabi/4.8/include -I${ANDROID_NDK_TOOLCHAIN_ROOT_PATH}/lib/gcc/arm-linux-androideabi/4.8/include-fixed")

# Set the location where cmake should search for programs
set(CMAKE_SYSTEM_PROGRAM_PATH 	"${ANDROID_NDK_TOOLCHAIN_ROOT_PATH}/bin")
# Set the location where cmake should search for libs
set(CMAKE_SYSTEM_LIBRARY_PATH "${SE_ANDROID_NDK_ROOT}/platforms/android-${SE_ANDROID_TARGET_ABI_VERSION}/arch-${ANDROID_TARGET_ARCHITECTURE}/usr/lib")

set(CMAKE_C_COMPILER "arm-linux-androideabi-gcc")
set(CMAKE_CXX_COMPILER "arm-linux-androideabi-g++")

set(COMMON_FLAGS "-DANDROID ${CMAKE_C_FLAGS} --sysroot=${ANDROID_NDK_SYSROOT}")

# Needed to allow NDK debugging
set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -DDEBUG -D_DEBUG -gdwarf-2" CACHE STRING "c++ Debug flags" FORCE)

set(CMAKE_CXX_FLAGS "${COMMON_FLAGS} -std=c++11 -Wall ${ANDROID_NDK_STL_CXXFLAGS} -L${ANDROID_NDK_STL_LIBRARYPATH} ${ANDROID_NDK_STL_LDFLAGS} ${ANDROID_NDK_PLATFORM_CXXFLAGS} ${ANDROID_NDK_TOOLCHAIN_INCLUDE_CXXFLAGS_FLAGS}" CACHE STRING "C++ Flags" FORCE) # Removed ${ANDROID_NDK_STL_LDFLAGS}
#set(CMAKE_CXX_FLAGS "${COMMON_FLAGS} -std=c++11 ${ANDROID_NDK_STL_CXXFLAGS} ${ANDROID_NDK_STL_LDFLAGS}" ) # removed -L${ANDROID_NDK_STL_LIBRARYPATH}
#set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${ANDROID_NDK_STL_LDFLAGS})
#set(CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS} ${ANDROID_NDK_STL_LDFLAGS})
#set(CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} ${ANDROID_NDK_STL_LDFLAGS})


# search paths
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

	message(STATUS "CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
	message(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")